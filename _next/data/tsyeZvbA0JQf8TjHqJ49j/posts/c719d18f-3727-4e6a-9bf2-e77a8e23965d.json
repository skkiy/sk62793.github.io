{"pageProps":{"postData":{"id":"c719d18f-3727-4e6a-9bf2-e77a8e23965d","date":"2021-12-01","title":"GO言語による並行処理","contents":[{"object":"block","id":"a36d0b58-4b03-4603-a6e8-5fe41bc74a27","created_time":"2021-12-01T18:12:00.000Z","last_edited_time":"2021-12-01T18:13:00.000Z","has_children":false,"archived":false,"type":"heading_1","heading_1":{"text":[{"type":"text","text":{"content":"1章 並行処理入門","link":null},"annotations":{"bold":false,"italic":false,"strikethrough":false,"underline":false,"code":false,"color":"default"},"plain_text":"1章 並行処理入門","href":null}]}},{"object":"block","id":"4bb26aa4-d94d-4441-bcc8-ba40d2c04338","created_time":"2021-12-01T18:12:00.000Z","last_edited_time":"2021-12-01T18:12:00.000Z","has_children":false,"archived":false,"type":"paragraph","paragraph":{"text":[{"type":"text","text":{"content":"並行処理とは：一つ以上の処理が同時に発生する処理","link":null},"annotations":{"bold":false,"italic":false,"strikethrough":false,"underline":false,"code":false,"color":"default"},"plain_text":"並行処理とは：一つ以上の処理が同時に発生する処理","href":null}]}},{"object":"block","id":"e32a4164-79be-4eab-b681-7d533726021b","created_time":"2021-12-01T18:12:00.000Z","last_edited_time":"2021-12-01T18:12:00.000Z","has_children":false,"archived":false,"type":"paragraph","paragraph":{"text":[{"type":"text","text":{"content":"クラウドコンピューティングによってコードを並行にするかという問題が生まれた\n→Webスケール：驚異的並列化可能な問題\n→ローリングアップデート、水平スケールが可能に","link":null},"annotations":{"bold":false,"italic":false,"strikethrough":false,"underline":false,"code":false,"color":"default"},"plain_text":"クラウドコンピューティングによってコードを並行にするかという問題が生まれた\n→Webスケール：驚異的並列化可能な問題\n→ローリングアップデート、水平スケールが可能に","href":null}]}},{"object":"block","id":"af59ab80-2235-4a3c-a3fb-bfa3b769242f","created_time":"2021-12-01T18:12:00.000Z","last_edited_time":"2021-12-01T18:12:00.000Z","has_children":false,"archived":false,"type":"heading_2","heading_2":{"text":[{"type":"text","text":{"content":"並行処理の難しさ","link":null},"annotations":{"bold":false,"italic":false,"strikethrough":false,"underline":false,"code":false,"color":"default"},"plain_text":"並行処理の難しさ","href":null}]}},{"object":"block","id":"ba2e7dbc-8869-4fdb-8908-6b8f1ae15d83","created_time":"2021-12-01T18:12:00.000Z","last_edited_time":"2021-12-01T18:12:00.000Z","has_children":false,"archived":false,"type":"heading_3","heading_3":{"text":[{"type":"text","text":{"content":"競合状態","link":null},"annotations":{"bold":false,"italic":false,"strikethrough":false,"underline":false,"code":false,"color":"default"},"plain_text":"競合状態","href":null}]}},{"object":"block","id":"a041cd1f-8d6a-4aa0-b212-cd3668ea9ec3","created_time":"2021-12-01T18:12:00.000Z","last_edited_time":"2021-12-01T18:12:00.000Z","has_children":false,"archived":false,"type":"paragraph","paragraph":{"text":[{"type":"text","text":{"content":"データ競合：同じ変数に読み込みと書き込みが同時に起こる","link":null},"annotations":{"bold":false,"italic":false,"strikethrough":false,"underline":false,"code":false,"color":"default"},"plain_text":"データ競合：同じ変数に読み込みと書き込みが同時に起こる","href":null}]}},{"object":"block","id":"967d0f03-e3a9-48f1-8134-0c510b40f838","created_time":"2021-12-01T18:12:00.000Z","last_edited_time":"2021-12-01T18:12:00.000Z","has_children":false,"archived":false,"type":"heading_3","heading_3":{"text":[{"type":"text","text":{"content":"アトミック性","link":null},"annotations":{"bold":false,"italic":false,"strikethrough":false,"underline":false,"code":false,"color":"default"},"plain_text":"アトミック性","href":null}]}},{"object":"block","id":"97de90b4-6885-45cc-934b-7a5666304407","created_time":"2021-12-01T18:12:00.000Z","last_edited_time":"2021-12-01T18:12:00.000Z","has_children":false,"archived":false,"type":"paragraph","paragraph":{"text":[{"type":"text","text":{"content":"アトミック性：それが操作されている特定のコンテキスト（スコープ、操作がアトミックであると考えられる範囲）の中では分割不能、或いは中断不可であること","link":null},"annotations":{"bold":false,"italic":false,"strikethrough":false,"underline":false,"code":false,"color":"default"},"plain_text":"アトミック性：それが操作されている特定のコンテキスト（スコープ、操作がアトミックであると考えられる範囲）の中では分割不能、或いは中断不可であること","href":null}]}},{"object":"block","id":"b1e5d381-2a70-4acb-adb5-67cb1de4cc3f","created_time":"2021-12-01T18:12:00.000Z","last_edited_time":"2021-12-01T18:12:00.000Z","has_children":false,"archived":false,"type":"paragraph","paragraph":{"text":[{"type":"text","text":{"content":"分割不能、中断不可：コンテキストの中で、何かアトミックな処理が起きた場合には、そのコンテキスト全体で処理をしていて、その他の何かが同時には起きていない","link":null},"annotations":{"bold":false,"italic":false,"strikethrough":false,"underline":false,"code":false,"color":"default"},"plain_text":"分割不能、中断不可：コンテキストの中で、何かアトミックな処理が起きた場合には、そのコンテキスト全体で処理をしていて、その他の何かが同時には起きていない","href":null}]}},{"object":"block","id":"b8815288-8826-4877-9311-ad743bf395a8","created_time":"2021-12-01T18:12:00.000Z","last_edited_time":"2021-12-01T18:12:00.000Z","has_children":false,"archived":false,"type":"heading_3","heading_3":{"text":[{"type":"text","text":{"content":"メモリアクセス同期","link":null},"annotations":{"bold":false,"italic":false,"strikethrough":false,"underline":false,"code":false,"color":"default"},"plain_text":"メモリアクセス同期","href":null}]}},{"object":"block","id":"f9d19ae9-c090-4d7f-9675-e787ab962c3d","created_time":"2021-12-01T18:12:00.000Z","last_edited_time":"2021-12-01T18:12:00.000Z","has_children":false,"archived":false,"type":"paragraph","paragraph":{"text":[{"type":"text","text":{"content":"クリティカルセクション：プログラム内で共有リソースに対する排他的なアクセスが必要な場所","link":null},"annotations":{"bold":false,"italic":false,"strikethrough":false,"underline":false,"code":false,"color":"default"},"plain_text":"クリティカルセクション：プログラム内で共有リソースに対する排他的なアクセスが必要な場所","href":null}]}},{"object":"block","id":"fe64693d-ca8f-429f-a2d9-986737c4cc82","created_time":"2021-12-01T18:12:00.000Z","last_edited_time":"2021-12-01T18:12:00.000Z","has_children":false,"archived":false,"type":"paragraph","paragraph":{"text":[{"type":"text","text":{"content":"メモリへの同期的アクセスによって解決できるわけではない","link":null},"annotations":{"bold":false,"italic":false,"strikethrough":false,"underline":false,"code":false,"color":"default"},"plain_text":"メモリへの同期的アクセスによって解決できるわけではない","href":null}]}},{"object":"block","id":"b5fcda21-fb06-412e-9933-ac173365e7d7","created_time":"2021-12-01T18:12:00.000Z","last_edited_time":"2021-12-01T18:12:00.000Z","has_children":false,"archived":false,"type":"heading_3","heading_3":{"text":[{"type":"text","text":{"content":"デッドロック","link":null},"annotations":{"bold":false,"italic":false,"strikethrough":false,"underline":false,"code":false,"color":"default"},"plain_text":"デッドロック","href":null}]}},{"object":"block","id":"1a9d9aa0-16d8-4e93-8c2c-6c50612ed389","created_time":"2021-12-01T18:12:00.000Z","last_edited_time":"2021-12-01T18:12:00.000Z","has_children":false,"archived":false,"type":"paragraph","paragraph":{"text":[{"type":"text","text":{"content":"全ての並行なプロセスがお互いの処理を待ち合っている状況","link":null},"annotations":{"bold":false,"italic":false,"strikethrough":false,"underline":false,"code":false,"color":"default"},"plain_text":"全ての並行なプロセスがお互いの処理を待ち合っている状況","href":null}]}},{"object":"block","id":"06e5b748-5be5-4e8e-9218-5f916b09aaae","created_time":"2021-12-01T18:12:00.000Z","last_edited_time":"2021-12-01T18:12:00.000Z","has_children":false,"archived":false,"type":"paragraph","paragraph":{"text":[{"type":"text","text":{"content":"検知するためのissue(https://github.com/golang/go/issues/13759)","link":null},"annotations":{"bold":false,"italic":false,"strikethrough":false,"underline":false,"code":false,"color":"default"},"plain_text":"検知するためのissue(https://github.com/golang/go/issues/13759)","href":null}]}},{"object":"block","id":"be1e4d65-3a6c-42b3-965e-a0af469efbc5","created_time":"2021-12-01T18:12:00.000Z","last_edited_time":"2021-12-01T18:12:00.000Z","has_children":false,"archived":false,"type":"paragraph","paragraph":{"text":[{"type":"text","text":{"content":"Coffman条件\n相互排他：ある並行プロセスがリソースに対して排他的な権利をどの時点においても保持している。\n条件待ち：ある並行プロセスはリソースの保持と追加のリソース待ちを同時に行わなければならない。\n横取り不可：ある並行プロセスによって保持されているリソースは、ソロプロセスによって飲み解放される。\n循環待ち：ある並行プロセス（P1）は、他の連なっている並行プロセス（P2）を待たなければならない。そしてP2はP1を待っている。","link":null},"annotations":{"bold":false,"italic":false,"strikethrough":false,"underline":false,"code":false,"color":"default"},"plain_text":"Coffman条件\n相互排他：ある並行プロセスがリソースに対して排他的な権利をどの時点においても保持している。\n条件待ち：ある並行プロセスはリソースの保持と追加のリソース待ちを同時に行わなければならない。\n横取り不可：ある並行プロセスによって保持されているリソースは、ソロプロセスによって飲み解放される。\n循環待ち：ある並行プロセス（P1）は、他の連なっている並行プロセス（P2）を待たなければならない。そしてP2はP1を待っている。","href":null}]}},{"object":"block","id":"d5fd09ab-7e96-4b2f-a7a5-c338a19014b3","created_time":"2021-12-01T18:12:00.000Z","last_edited_time":"2021-12-01T18:12:00.000Z","has_children":false,"archived":false,"type":"heading_3","heading_3":{"text":[{"type":"text","text":{"content":"ライブロック","link":null},"annotations":{"bold":false,"italic":false,"strikethrough":false,"underline":false,"code":false,"color":"default"},"plain_text":"ライブロック","href":null}]}},{"object":"block","id":"0b2e903c-a91a-485d-a95d-0b72a72ee7a7","created_time":"2021-12-01T18:12:00.000Z","last_edited_time":"2021-12-01T18:12:00.000Z","has_children":false,"archived":false,"type":"paragraph","paragraph":{"text":[{"type":"text","text":{"content":"並行操作を行なっているけど、その操作はプログラムの状態を全く進めていないプログラム\n廊下で人同士（複数のgoroutine）がお互いに道を譲ろうとして（デッドロックを予防して）いる状態","link":null},"annotations":{"bold":false,"italic":false,"strikethrough":false,"underline":false,"code":false,"color":"default"},"plain_text":"並行操作を行なっているけど、その操作はプログラムの状態を全く進めていないプログラム\n廊下で人同士（複数のgoroutine）がお互いに道を譲ろうとして（デッドロックを予防して）いる状態","href":null}]}},{"object":"block","id":"eabcd030-6829-46a9-b27a-6bd0619b0245","created_time":"2021-12-01T18:12:00.000Z","last_edited_time":"2021-12-01T18:12:00.000Z","has_children":false,"archived":false,"type":"heading_3","heading_3":{"text":[{"type":"text","text":{"content":"リソース枯渇","link":null},"annotations":{"bold":false,"italic":false,"strikethrough":false,"underline":false,"code":false,"color":"default"},"plain_text":"リソース枯渇","href":null}]}},{"object":"block","id":"1f55a078-bcca-46a4-a464-f89c183b1587","created_time":"2021-12-01T18:12:00.000Z","last_edited_time":"2021-12-01T18:12:00.000Z","has_children":false,"archived":false,"type":"paragraph","paragraph":{"text":[{"type":"text","text":{"content":"並行プロセスが仕事をするのに必要なリソースを取得できない状況\nあるゴルーチンが不必要にクリティカルセクションを超えて共有ロックを広げ、他のゴルーチンが効率的に仕事をできない状態\n検知するにはログを出力して、仕事の速度が期待通りになっているかを測定する","link":null},"annotations":{"bold":false,"italic":false,"strikethrough":false,"underline":false,"code":false,"color":"default"},"plain_text":"並行プロセスが仕事をするのに必要なリソースを取得できない状況\nあるゴルーチンが不必要にクリティカルセクションを超えて共有ロックを広げ、他のゴルーチンが効率的に仕事をできない状態\n検知するにはログを出力して、仕事の速度が期待通りになっているかを測定する","href":null}]}},{"object":"block","id":"7c1da142-5379-407a-89f8-3110ddf5fae8","created_time":"2021-12-01T18:12:00.000Z","last_edited_time":"2021-12-01T18:12:00.000Z","has_children":false,"archived":false,"type":"heading_3","heading_3":{"text":[{"type":"text","text":{"content":"安全性","link":null},"annotations":{"bold":false,"italic":false,"strikethrough":false,"underline":false,"code":false,"color":"default"},"plain_text":"安全性","href":null}]}},{"object":"block","id":"527ee2b3-5979-4db6-b877-c5ca165022e1","created_time":"2021-12-01T18:12:00.000Z","last_edited_time":"2021-12-01T18:12:00.000Z","has_children":false,"archived":false,"type":"paragraph","paragraph":{"text":[{"type":"text","text":{"content":"並行処理が関わる問題空間で関数、メソッド、変数を公開する場合は、以下の3点に触れる。\n・誰が並行処理を担っているか。\n・問題空間がどのように並行処理のプリミティブに対応しているか。\n・誰が同期処理を担っているか。","link":null},"annotations":{"bold":false,"italic":false,"strikethrough":false,"underline":false,"code":false,"color":"default"},"plain_text":"並行処理が関わる問題空間で関数、メソッド、変数を公開する場合は、以下の3点に触れる。\n・誰が並行処理を担っているか。\n・問題空間がどのように並行処理のプリミティブに対応しているか。\n・誰が同期処理を担っているか。","href":null}]}},{"object":"block","id":"98f1f641-f7c5-466f-847c-37a504a2c020","created_time":"2021-12-02T13:41:00.000Z","last_edited_time":"2021-12-02T13:42:00.000Z","has_children":false,"archived":false,"type":"heading_1","heading_1":{"text":[{"type":"text","text":{"content":"2章 並行性をどうモデル化するか：CSPとは何か","link":null},"annotations":{"bold":false,"italic":false,"strikethrough":false,"underline":false,"code":false,"color":"default"},"plain_text":"2章 並行性をどうモデル化するか：CSPとは何か","href":null}]}},{"object":"block","id":"e1390c21-f6ae-4b6a-be25-6cbcfb5a5a5d","created_time":"2021-12-02T13:41:00.000Z","last_edited_time":"2021-12-02T13:41:00.000Z","has_children":false,"archived":false,"type":"heading_2","heading_2":{"text":[{"type":"text","text":{"content":"並行性と並列性の違い","link":null},"annotations":{"bold":false,"italic":false,"strikethrough":false,"underline":false,"code":false,"color":"default"},"plain_text":"並行性と並列性の違い","href":null}]}},{"object":"block","id":"db3e0807-a7e2-4460-9a40-994e45c3c9c8","created_time":"2021-12-02T13:41:00.000Z","last_edited_time":"2021-12-02T13:41:00.000Z","has_children":false,"archived":false,"type":"paragraph","paragraph":{"text":[{"type":"text","text":{"content":"並行性はコードの性質を指し、並列性は動作しているプログラムの性質を指す。","link":null},"annotations":{"bold":false,"italic":false,"strikethrough":false,"underline":false,"code":false,"color":"default"},"plain_text":"並行性はコードの性質を指し、並列性は動作しているプログラムの性質を指す。","href":null}]}},{"object":"block","id":"8f1c8f5d-7604-4f2f-b26e-f55ceb4fe61c","created_time":"2021-12-02T13:41:00.000Z","last_edited_time":"2021-12-02T13:41:00.000Z","has_children":false,"archived":false,"type":"heading_2","heading_2":{"text":[{"type":"text","text":{"content":"CSP(Communicating Sequential Processes)","link":null},"annotations":{"bold":false,"italic":false,"strikethrough":false,"underline":false,"code":false,"color":"default"},"plain_text":"CSP(Communicating Sequential Processes)","href":null}]}},{"object":"block","id":"057d7cbf-38f1-47f6-a2b0-fa8a7fe66702","created_time":"2021-12-02T13:41:00.000Z","last_edited_time":"2021-12-02T13:41:00.000Z","has_children":false,"archived":false,"type":"paragraph","paragraph":{"text":[{"type":"text","text":{"content":"独立したプロセス群がメッセージパッシングによって通信することで相互にやりとりしているもの\nGoではCSPを言語仕様として採用しているため、読み書き、理解のコストが低くなっている","link":null},"annotations":{"bold":false,"italic":false,"strikethrough":false,"underline":false,"code":false,"color":"default"},"plain_text":"独立したプロセス群がメッセージパッシングによって通信することで相互にやりとりしているもの\nGoではCSPを言語仕様として採用しているため、読み書き、理解のコストが低くなっている","href":null}]}},{"object":"block","id":"33f0c292-a428-4a8c-b754-725063cfd3cd","created_time":"2021-12-02T13:41:00.000Z","last_edited_time":"2021-12-02T13:41:00.000Z","has_children":false,"archived":false,"type":"paragraph","paragraph":{"text":[{"type":"text","text":{"content":"通信によってメモリを共有し、メモリの共有によって通信してはいけない","link":null},"annotations":{"bold":false,"italic":false,"strikethrough":false,"underline":false,"code":false,"color":"default"},"plain_text":"通信によってメモリを共有し、メモリの共有によって通信してはいけない","href":null}]}},{"object":"block","id":"d7bd97a3-b384-4e1c-a6aa-a0392bc08d25","created_time":"2021-12-02T13:41:00.000Z","last_edited_time":"2021-12-02T13:41:00.000Z","has_children":false,"archived":false,"type":"paragraph","paragraph":{"text":[{"type":"text","text":{"content":"プリミティブを使うか、チャネルを使うかの判断基準\n・データの所有権を移動しようとしているか\n・構造体の内部の状態を保護しようとしているか\n・複数のロジックを強調させようとしているか\n・パフォーマンスクリティカルセクションか","link":null},"annotations":{"bold":false,"italic":false,"strikethrough":false,"underline":false,"code":false,"color":"default"},"plain_text":"プリミティブを使うか、チャネルを使うかの判断基準\n・データの所有権を移動しようとしているか\n・構造体の内部の状態を保護しようとしているか\n・複数のロジックを強調させようとしているか\n・パフォーマンスクリティカルセクションか","href":null}]}},{"object":"block","id":"edbe7db1-fa78-4e1f-8e80-55663afc9bf5","created_time":"2021-12-02T13:42:00.000Z","last_edited_time":"2021-12-02T13:42:00.000Z","has_children":false,"archived":false,"type":"heading_1","heading_1":{"text":[{"type":"text","text":{"content":"3章 Goにおける並行処理の構成要素","link":null},"annotations":{"bold":false,"italic":false,"strikethrough":false,"underline":false,"code":false,"color":"default"},"plain_text":"3章 Goにおける並行処理の構成要素","href":null}]}},{"object":"block","id":"f68143b0-90c7-49eb-9478-4c13b19ab9c1","created_time":"2021-12-02T13:42:00.000Z","last_edited_time":"2021-12-02T13:42:00.000Z","has_children":false,"archived":false,"type":"heading_3","heading_3":{"text":[{"type":"text","text":{"content":"ゴルーチン","link":null},"annotations":{"bold":false,"italic":false,"strikethrough":false,"underline":false,"code":false,"color":"default"},"plain_text":"ゴルーチン","href":null}]}},{"object":"block","id":"bdfd865d-e90f-4859-a706-bd08d6959dac","created_time":"2021-12-02T13:42:00.000Z","last_edited_time":"2021-12-02T13:42:00.000Z","has_children":false,"archived":false,"type":"paragraph","paragraph":{"text":[{"type":"text","text":{"content":"一時停止や再エントリーのポイントは提供されておらず、ランタイムによって自動的に行われる\nゴルーチンがブロックしたときにのみ割り込まれる","link":null},"annotations":{"bold":false,"italic":false,"strikethrough":false,"underline":false,"code":false,"color":"default"},"plain_text":"一時停止や再エントリーのポイントは提供されておらず、ランタイムによって自動的に行われる\nゴルーチンがブロックしたときにのみ割り込まれる","href":null}]}},{"object":"block","id":"b565c092-4a50-415b-85b8-8e52af805a2f","created_time":"2021-12-02T13:42:00.000Z","last_edited_time":"2021-12-02T13:42:00.000Z","has_children":false,"archived":false,"type":"paragraph","paragraph":{"text":[{"type":"text","text":{"content":"OSスレッド、グリーンスレッド\nM:Nスケジューラー（M個のグリーンスレッドをN個のOSスレッドに対応させるもの）","link":null},"annotations":{"bold":false,"italic":false,"strikethrough":false,"underline":false,"code":false,"color":"default"},"plain_text":"OSスレッド、グリーンスレッド\nM:Nスケジューラー（M個のグリーンスレッドをN個のOSスレッドに対応させるもの）","href":null}]}},{"object":"block","id":"5cd4341a-00d8-4d78-9478-7e9ef2f1b65d","created_time":"2021-12-02T13:42:00.000Z","last_edited_time":"2021-12-02T13:42:00.000Z","has_children":false,"archived":false,"type":"paragraph","paragraph":{"text":[{"type":"text","text":{"content":"fork-joinモデル：プログラムが子の処理を分岐させて、親と並行に実行させること。この処理が親に再度合流する場所を合流ポイントと呼ぶ。","link":null},"annotations":{"bold":false,"italic":false,"strikethrough":false,"underline":false,"code":false,"color":"default"},"plain_text":"fork-joinモデル：プログラムが子の処理を分岐させて、親と並行に実行させること。この処理が親に再度合流する場所を合流ポイントと呼ぶ。","href":null}]}},{"object":"block","id":"41b654e4-eedc-4be8-b2cb-111ddd301ea7","created_time":"2021-12-02T13:42:00.000Z","last_edited_time":"2021-12-02T13:42:00.000Z","has_children":false,"archived":false,"type":"paragraph","paragraph":{"text":[{"type":"text","text":{"content":"合流ポイントの作成のためにsync.WaitGroupを使うことができる。","link":null},"annotations":{"bold":false,"italic":false,"strikethrough":false,"underline":false,"code":false,"color":"default"},"plain_text":"合流ポイントの作成のためにsync.WaitGroupを使うことができる。","href":null}]}},{"object":"block","id":"60d7019a-6b08-4431-8969-c566e3a272e4","created_time":"2021-12-02T13:42:00.000Z","last_edited_time":"2021-12-02T13:42:00.000Z","has_children":false,"archived":false,"type":"paragraph","paragraph":{"text":[{"type":"text","text":{"content":"ゴルーチンは軽量","link":null},"annotations":{"bold":false,"italic":false,"strikethrough":false,"underline":false,"code":false,"color":"default"},"plain_text":"ゴルーチンは軽量","href":null}]}},{"object":"block","id":"6f2969df-cccc-4589-b12c-54968755c642","created_time":"2021-12-02T13:42:00.000Z","last_edited_time":"2021-12-02T13:42:00.000Z","has_children":false,"archived":false,"type":"paragraph","paragraph":{"text":[{"type":"text","text":{"content":"コンテキストスイッチ\n別の並行プロセスに切り替えるために状態を保存する必要がある","link":null},"annotations":{"bold":false,"italic":false,"strikethrough":false,"underline":false,"code":false,"color":"default"},"plain_text":"コンテキストスイッチ\n別の並行プロセスに切り替えるために状態を保存する必要がある","href":null}]}},{"object":"block","id":"65e52633-c70c-4cfe-9ffe-cb277f1c6703","created_time":"2021-12-02T13:42:00.000Z","last_edited_time":"2021-12-02T13:42:00.000Z","has_children":false,"archived":false,"type":"heading_3","heading_3":{"text":[{"type":"text","text":{"content":"syncパッケージ","link":null},"annotations":{"bold":false,"italic":false,"strikethrough":false,"underline":false,"code":false,"color":"default"},"plain_text":"syncパッケージ","href":null}]}},{"object":"block","id":"726679de-54f4-493d-bab0-a02d7076a039","created_time":"2021-12-02T13:42:00.000Z","last_edited_time":"2021-12-02T13:42:00.000Z","has_children":false,"archived":false,"type":"paragraph","paragraph":{"text":[{"type":"text","text":{"content":"処理の完了を待つ","link":null},"annotations":{"bold":false,"italic":false,"strikethrough":false,"underline":false,"code":false,"color":"default"},"plain_text":"処理の完了を待つ","href":null}]}},{"object":"block","id":"a6789450-9561-4287-a461-1f6cbdd81163","created_time":"2021-12-02T13:42:00.000Z","last_edited_time":"2021-12-02T13:42:00.000Z","has_children":false,"archived":false,"type":"heading_3","heading_3":{"text":[{"type":"text","text":{"content":"MutexとRWMutex","link":null},"annotations":{"bold":false,"italic":false,"strikethrough":false,"underline":false,"code":false,"color":"default"},"plain_text":"MutexとRWMutex","href":null}]}},{"object":"block","id":"726f3d56-f267-4e0b-9d77-19df914935ac","created_time":"2021-12-02T13:42:00.000Z","last_edited_time":"2021-12-02T13:42:00.000Z","has_children":false,"archived":false,"type":"paragraph","paragraph":{"text":[{"type":"text","text":{"content":"相互排他、メモリに対する同期アクセスの慣習を作る","link":null},"annotations":{"bold":false,"italic":false,"strikethrough":false,"underline":false,"code":false,"color":"default"},"plain_text":"相互排他、メモリに対する同期アクセスの慣習を作る","href":null}]}},{"object":"block","id":"7a4018a5-17dd-4d28-ab08-5e3894ae13eb","created_time":"2021-12-02T13:42:00.000Z","last_edited_time":"2021-12-02T13:42:00.000Z","has_children":false,"archived":false,"type":"heading_3","heading_3":{"text":[{"type":"text","text":{"content":"Cond","link":null},"annotations":{"bold":false,"italic":false,"strikethrough":false,"underline":false,"code":false,"color":"default"},"plain_text":"Cond","href":null}]}},{"object":"block","id":"f429b773-8cd5-45ca-8d70-e98a86ceea7c","created_time":"2021-12-02T13:42:00.000Z","last_edited_time":"2021-12-02T13:42:00.000Z","has_children":false,"archived":false,"type":"paragraph","paragraph":{"text":[{"type":"text","text":{"content":"ゴルーチンが待機したりイベントの発生を知らせるためのランデブーポイント","link":null},"annotations":{"bold":false,"italic":false,"strikethrough":false,"underline":false,"code":false,"color":"default"},"plain_text":"ゴルーチンが待機したりイベントの発生を知らせるためのランデブーポイント","href":null}]}},{"object":"block","id":"684c259d-909a-4c65-b0de-c503843d7b50","created_time":"2021-12-02T13:42:00.000Z","last_edited_time":"2021-12-02T13:42:00.000Z","has_children":false,"archived":false,"type":"paragraph","paragraph":{"text":[{"type":"text","text":{"content":"条件が起きるのを待っている間ロックをずっと保持しているわけではない","link":null},"annotations":{"bold":false,"italic":false,"strikethrough":false,"underline":false,"code":false,"color":"default"},"plain_text":"条件が起きるのを待っている間ロックをずっと保持しているわけではない","href":null}]}},{"object":"block","id":"a345b2fc-3e17-4661-a322-1e3457665bd7","created_time":"2021-12-02T13:42:00.000Z","last_edited_time":"2021-12-02T13:42:00.000Z","has_children":false,"archived":false,"type":"paragraph","paragraph":{"text":[{"type":"text","text":{"content":"Signalはシグナルを一番長く待っているゴルーチンにシグナルを伝える\nBroadcastはシグナルを待っている全てのゴルーチンにシグナルを伝える","link":null},"annotations":{"bold":false,"italic":false,"strikethrough":false,"underline":false,"code":false,"color":"default"},"plain_text":"Signalはシグナルを一番長く待っているゴルーチンにシグナルを伝える\nBroadcastはシグナルを待っている全てのゴルーチンにシグナルを伝える","href":null}]}},{"object":"block","id":"41655ac6-129d-472f-987c-fc9a105c287d","created_time":"2021-12-02T13:42:00.000Z","last_edited_time":"2021-12-02T13:42:00.000Z","has_children":false,"archived":false,"type":"heading_3","heading_3":{"text":[{"type":"text","text":{"content":"Once","link":null},"annotations":{"bold":false,"italic":false,"strikethrough":false,"underline":false,"code":false,"color":"default"},"plain_text":"Once","href":null}]}},{"object":"block","id":"d62e4f4a-5b64-4626-ae32-9f5ff52edb54","created_time":"2021-12-02T13:42:00.000Z","last_edited_time":"2021-12-02T13:42:00.000Z","has_children":false,"archived":false,"type":"paragraph","paragraph":{"text":[{"type":"text","text":{"content":"Doに渡された関数が異なるゴルーチンで呼ばれたとしても一度しか実行されないようにする","link":null},"annotations":{"bold":false,"italic":false,"strikethrough":false,"underline":false,"code":false,"color":"default"},"plain_text":"Doに渡された関数が異なるゴルーチンで呼ばれたとしても一度しか実行されないようにする","href":null}]}},{"object":"block","id":"13154599-5b6d-4074-82eb-16712742e3a1","created_time":"2021-12-02T13:42:00.000Z","last_edited_time":"2021-12-02T13:42:00.000Z","has_children":false,"archived":false,"type":"heading_3","heading_3":{"text":[{"type":"text","text":{"content":"Pool","link":null},"annotations":{"bold":false,"italic":false,"strikethrough":false,"underline":false,"code":false,"color":"default"},"plain_text":"Pool","href":null}]}},{"object":"block","id":"12913935-a5a5-4629-ac54-c3cb6555b167","created_time":"2021-12-02T13:42:00.000Z","last_edited_time":"2021-12-02T13:42:00.000Z","has_children":false,"archived":false,"type":"paragraph","paragraph":{"text":[{"type":"text","text":{"content":"コストが高いものを作るときに数を制限して、決まった数しか作られないようにしつつ、予測できない数の操作がこれらにアクセスをリクエストできるようにする。複数のゴルーチンから安全に使うことができる。","link":null},"annotations":{"bold":false,"italic":false,"strikethrough":false,"underline":false,"code":false,"color":"default"},"plain_text":"コストが高いものを作るときに数を制限して、決まった数しか作られないようにしつつ、予測できない数の操作がこれらにアクセスをリクエストできるようにする。複数のゴルーチンから安全に使うことができる。","href":null}]}},{"object":"block","id":"c1aeb967-3cf2-4cfb-8577-43e4c9b5d937","created_time":"2021-12-02T13:42:00.000Z","last_edited_time":"2021-12-02T13:42:00.000Z","has_children":false,"archived":false,"type":"heading_3","heading_3":{"text":[{"type":"text","text":{"content":"Channel","link":null},"annotations":{"bold":false,"italic":false,"strikethrough":false,"underline":false,"code":false,"color":"default"},"plain_text":"Channel","href":null}]}},{"object":"block","id":"5a2b26e4-f9d3-44c1-8bbe-f1660216c20f","created_time":"2021-12-02T13:42:00.000Z","last_edited_time":"2021-12-02T13:42:00.000Z","has_children":false,"archived":false,"type":"paragraph","paragraph":{"text":[{"type":"text","text":{"content":"読み取り用チャネルから2つ目の戻り値を受け取ることができ、読み込みできたかどうか、閉じたチャネルから生成されたデフォルト値のいずれかを示す。","link":null},"annotations":{"bold":false,"italic":false,"strikethrough":false,"underline":false,"code":false,"color":"default"},"plain_text":"読み取り用チャネルから2つ目の戻り値を受け取ることができ、読み込みできたかどうか、閉じたチャネルから生成されたデフォルト値のいずれかを示す。","href":null}]}},{"object":"block","id":"907decb2-64f0-4821-a08e-52285f0c6ec7","created_time":"2021-12-02T13:42:00.000Z","last_edited_time":"2021-12-02T13:42:00.000Z","has_children":false,"archived":false,"type":"paragraph","paragraph":{"text":[{"type":"text","text":{"content":"チャネルを閉じるにはcloseを使う","link":null},"annotations":{"bold":false,"italic":false,"strikethrough":false,"underline":false,"code":false,"color":"default"},"plain_text":"チャネルを閉じるにはcloseを使う","href":null}]}},{"object":"block","id":"9830730d-5c1a-4285-be6b-fdeaaa681bea","created_time":"2021-12-02T13:42:00.000Z","last_edited_time":"2021-12-02T13:42:00.000Z","has_children":false,"archived":false,"type":"paragraph","paragraph":{"text":[{"type":"text","text":{"content":"rangeを使うと、チャネルが閉じたときに自動的にループを終了する","link":null},"annotations":{"bold":false,"italic":false,"strikethrough":false,"underline":false,"code":false,"color":"default"},"plain_text":"rangeを使うと、チャネルが閉じたときに自動的にループを終了する","href":null}]}},{"object":"block","id":"c572d649-7d17-4aef-aa41-1e956b325782","created_time":"2021-12-02T13:42:00.000Z","last_edited_time":"2021-12-02T13:42:00.000Z","has_children":false,"archived":false,"type":"paragraph","paragraph":{"text":[{"type":"text","text":{"content":"バッファ付きチャネル\n読み込みが行われなくても書き込み可能な回数を増やす","link":null},"annotations":{"bold":false,"italic":false,"strikethrough":false,"underline":false,"code":false,"color":"default"},"plain_text":"バッファ付きチャネル\n読み込みが行われなくても書き込み可能な回数を増やす","href":null}]}},{"object":"block","id":"0343ff7d-83cc-4d30-8c09-1b16d31820b7","created_time":"2021-12-02T13:42:00.000Z","last_edited_time":"2021-12-02T13:42:00.000Z","has_children":false,"archived":false,"type":"paragraph","paragraph":{"text":[{"type":"text","text":{"content":"チャネルを所有するゴルーチンが踏むべき手順\n・チャネルを初期化する\n・書き込みを行うか、他のゴルーチンに所有権を渡す\n・チャネルを閉じる\n・上の3つの手順をカプセルかして読み込みチャネルを経由して公開する","link":null},"annotations":{"bold":false,"italic":false,"strikethrough":false,"underline":false,"code":false,"color":"default"},"plain_text":"チャネルを所有するゴルーチンが踏むべき手順\n・チャネルを初期化する\n・書き込みを行うか、他のゴルーチンに所有権を渡す\n・チャネルを閉じる\n・上の3つの手順をカプセルかして読み込みチャネルを経由して公開する","href":null}]}},{"object":"block","id":"729aefda-960a-40e8-bc0b-f04c94c760dd","created_time":"2021-12-02T13:42:00.000Z","last_edited_time":"2021-12-02T13:42:00.000Z","has_children":false,"archived":false,"type":"paragraph","paragraph":{"text":[{"type":"text","text":{"content":"チャネルの消費者\n・チャネルがいつ閉じられたかを把握する\n・ブロックする操作は責任をもって扱う","link":null},"annotations":{"bold":false,"italic":false,"strikethrough":false,"underline":false,"code":false,"color":"default"},"plain_text":"チャネルの消費者\n・チャネルがいつ閉じられたかを把握する\n・ブロックする操作は責任をもって扱う","href":null}]}},{"object":"block","id":"8b164fb3-6a50-4e6a-b096-6c742ee8e4b3","created_time":"2021-12-02T13:42:00.000Z","last_edited_time":"2021-12-02T13:42:00.000Z","has_children":false,"archived":false,"type":"code","code":{"text":[{"type":"text","text":{"content":"chanOwner := func() <- chan int {\n\tresultStream := make(chan int, 5)\n\tgo func() {\n\t\tdefer close(resultStream)\n\t\tfor i := 0; i <= 5; i++ {\n\t\t\tresultStream <- i\n\t\t}\n\t}()\n\treturn resultStream\n}\n\nresultStream := chanOwner()\nfor result := range resultStream {\n\tfmt.Printf(\"Received: %d\\n\", result)\n}\nfmt.Println(\"Done receiving!\")","link":null},"annotations":{"bold":false,"italic":false,"strikethrough":false,"underline":false,"code":false,"color":"default"},"plain_text":"chanOwner := func() <- chan int {\n\tresultStream := make(chan int, 5)\n\tgo func() {\n\t\tdefer close(resultStream)\n\t\tfor i := 0; i <= 5; i++ {\n\t\t\tresultStream <- i\n\t\t}\n\t}()\n\treturn resultStream\n}\n\nresultStream := chanOwner()\nfor result := range resultStream {\n\tfmt.Printf(\"Received: %d\\n\", result)\n}\nfmt.Println(\"Done receiving!\")","href":null}],"language":"go"}},{"object":"block","id":"cbd543cd-9bf0-4f5b-a2fe-211406dde70c","created_time":"2021-12-02T13:42:00.000Z","last_edited_time":"2021-12-02T13:42:00.000Z","has_children":false,"archived":false,"type":"heading_3","heading_3":{"text":[{"type":"text","text":{"content":"select","link":null},"annotations":{"bold":false,"italic":false,"strikethrough":false,"underline":false,"code":false,"color":"default"},"plain_text":"select","href":null}]}},{"object":"block","id":"c373d51f-e065-4e3d-b10d-147da7bbfe0c","created_time":"2021-12-02T13:42:00.000Z","last_edited_time":"2021-12-02T13:42:00.000Z","has_children":false,"archived":false,"type":"paragraph","paragraph":{"text":[{"type":"text","text":{"content":"キャンセル処理、タイムアウト、待機、デフォルト値といった概念とチャネルを安全にまとめる","link":null},"annotations":{"bold":false,"italic":false,"strikethrough":false,"underline":false,"code":false,"color":"default"},"plain_text":"キャンセル処理、タイムアウト、待機、デフォルト値といった概念とチャネルを安全にまとめる","href":null}]}},{"object":"block","id":"ae221fd5-f2ae-4fba-9b5d-88e4a42d5ed8","created_time":"2021-12-02T13:42:00.000Z","last_edited_time":"2021-12-02T13:42:00.000Z","has_children":false,"archived":false,"type":"paragraph","paragraph":{"text":[{"type":"text","text":{"content":"複数のチャネルが同時に読み込めるようになったときは、疑似乱数による一様選択をする","link":null},"annotations":{"bold":false,"italic":false,"strikethrough":false,"underline":false,"code":false,"color":"default"},"plain_text":"複数のチャネルが同時に読み込めるようになったときは、疑似乱数による一様選択をする","href":null}]}},{"object":"block","id":"bcc7f775-85fd-4f24-a4e0-7689c653e5e2","created_time":"2021-12-02T13:42:00.000Z","last_edited_time":"2021-12-02T13:42:00.000Z","has_children":false,"archived":false,"type":"paragraph","paragraph":{"text":[{"type":"text","text":{"content":"タイムアウトにはtime.After関数を使える","link":null},"annotations":{"bold":false,"italic":false,"strikethrough":false,"underline":false,"code":false,"color":"default"},"plain_text":"タイムアウトにはtime.After関数を使える","href":null}]}},{"object":"block","id":"9d8426de-e4a8-4d72-a2de-674d8b9b9fc2","created_time":"2021-12-02T13:42:00.000Z","last_edited_time":"2021-12-02T13:42:00.000Z","has_children":false,"archived":false,"type":"heading_3","heading_3":{"text":[{"type":"text","text":{"content":"GOMAXPROCSレバー","link":null},"annotations":{"bold":false,"italic":false,"strikethrough":false,"underline":false,"code":false,"color":"default"},"plain_text":"GOMAXPROCSレバー","href":null}]}},{"object":"block","id":"265d263c-bdc6-41a6-a670-c701f196d67a","created_time":"2021-12-02T13:42:00.000Z","last_edited_time":"2021-12-02T13:42:00.000Z","has_children":false,"archived":false,"type":"paragraph","paragraph":{"text":[{"type":"text","text":{"content":"ワークキューと呼ばれるOSスレッドの数を制御している","link":null},"annotations":{"bold":false,"italic":false,"strikethrough":false,"underline":false,"code":false,"color":"default"},"plain_text":"ワークキューと呼ばれるOSスレッドの数を制御している","href":null}]}},{"object":"block","id":"d6936e58-f42a-4574-a56a-0a25f0a9af0d","created_time":"2021-12-02T13:43:00.000Z","last_edited_time":"2021-12-02T13:43:00.000Z","has_children":false,"archived":false,"type":"heading_1","heading_1":{"text":[{"type":"text","text":{"content":"4章 Goでの並行処理パターン","link":null},"annotations":{"bold":false,"italic":false,"strikethrough":false,"underline":false,"code":false,"color":"default"},"plain_text":"4章 Goでの並行処理パターン","href":null}]}},{"object":"block","id":"374cd406-93ba-4fe2-93e6-0b0984861595","created_time":"2021-12-02T13:43:00.000Z","last_edited_time":"2021-12-02T13:43:00.000Z","has_children":false,"archived":false,"type":"heading_2","heading_2":{"text":[{"type":"text","text":{"content":"拘束","link":null},"annotations":{"bold":false,"italic":false,"strikethrough":false,"underline":false,"code":false,"color":"default"},"plain_text":"拘束","href":null}]}},{"object":"block","id":"639c7ec2-b3d8-44a8-9a68-3f9e2b31c251","created_time":"2021-12-02T13:43:00.000Z","last_edited_time":"2021-12-02T13:43:00.000Z","has_children":false,"archived":false,"type":"paragraph","paragraph":{"text":[{"type":"text","text":{"content":"情報をたった一つの平行プロセスからのみ得られることを確実にする考え方","link":null},"annotations":{"bold":false,"italic":false,"strikethrough":false,"underline":false,"code":false,"color":"default"},"plain_text":"情報をたった一つの平行プロセスからのみ得られることを確実にする考え方","href":null}]}},{"object":"block","id":"6cfb9393-b2ae-4669-be89-762a5ace2b78","created_time":"2021-12-02T13:43:00.000Z","last_edited_time":"2021-12-02T13:43:00.000Z","has_children":false,"archived":false,"type":"paragraph","paragraph":{"text":[{"type":"text","text":{"content":"アドホック拘束\n拘束を規約によって達成した場合（静的解析）","link":null},"annotations":{"bold":false,"italic":false,"strikethrough":false,"underline":false,"code":false,"color":"default"},"plain_text":"アドホック拘束\n拘束を規約によって達成した場合（静的解析）","href":null}]}},{"object":"block","id":"cf2f0692-d109-414c-a2cf-b0a228411865","created_time":"2021-12-02T13:43:00.000Z","last_edited_time":"2021-12-02T13:43:00.000Z","has_children":false,"archived":false,"type":"paragraph","paragraph":{"text":[{"type":"text","text":{"content":"レキシカル拘束\nレキシカルスコープを使って適切なデータと並行処理のプリミティブだけを複数の平行プロセスが使えるように公開すること（コンパイラ）","link":null},"annotations":{"bold":false,"italic":false,"strikethrough":false,"underline":false,"code":false,"color":"default"},"plain_text":"レキシカル拘束\nレキシカルスコープを使って適切なデータと並行処理のプリミティブだけを複数の平行プロセスが使えるように公開すること（コンパイラ）","href":null}]}},{"object":"block","id":"6efd2183-9ce4-4740-b176-eb008501457a","created_time":"2021-12-02T13:43:00.000Z","last_edited_time":"2021-12-02T13:43:00.000Z","has_children":false,"archived":false,"type":"heading_2","heading_2":{"text":[{"type":"text","text":{"content":"for-selectループ","link":null},"annotations":{"bold":false,"italic":false,"strikethrough":false,"underline":false,"code":false,"color":"default"},"plain_text":"for-selectループ","href":null}]}},{"object":"block","id":"4adf4793-45d1-41ae-b183-b6d6ef5d36ec","created_time":"2021-12-02T13:43:00.000Z","last_edited_time":"2021-12-02T13:43:00.000Z","has_children":false,"archived":false,"type":"paragraph","paragraph":{"text":[{"type":"text","text":{"content":"・チャネルからくりかえしの変数を送出する","link":null},"annotations":{"bold":false,"italic":false,"strikethrough":false,"underline":false,"code":false,"color":"default"},"plain_text":"・チャネルからくりかえしの変数を送出する","href":null}]}},{"object":"block","id":"34495e92-b39d-4620-8acd-87c9688e3d24","created_time":"2021-12-02T13:43:00.000Z","last_edited_time":"2021-12-02T13:43:00.000Z","has_children":false,"archived":false,"type":"code","code":{"text":[{"type":"text","text":{"content":"for _, s := range []string{\"a\", \"b\", \"c\"} {\n\tselect {\n\tcase <- done:\n\t\treturn\n\tcase stringStream <- s:\n\t}\n}","link":null},"annotations":{"bold":false,"italic":false,"strikethrough":false,"underline":false,"code":false,"color":"default"},"plain_text":"for _, s := range []string{\"a\", \"b\", \"c\"} {\n\tselect {\n\tcase <- done:\n\t\treturn\n\tcase stringStream <- s:\n\t}\n}","href":null}],"language":"go"}},{"object":"block","id":"cf87116b-c0b2-4c71-bf8a-1bdd22c12dec","created_time":"2021-12-02T13:43:00.000Z","last_edited_time":"2021-12-02T13:43:00.000Z","has_children":false,"archived":false,"type":"paragraph","paragraph":{"text":[{"type":"text","text":{"content":"・停止シグナルを待つ無限ループ","link":null},"annotations":{"bold":false,"italic":false,"strikethrough":false,"underline":false,"code":false,"color":"default"},"plain_text":"・停止シグナルを待つ無限ループ","href":null}]}},{"object":"block","id":"7cab29c3-c68d-4b9d-bef2-1f5254b2627d","created_time":"2021-12-02T13:43:00.000Z","last_edited_time":"2021-12-02T13:43:00.000Z","has_children":false,"archived":false,"type":"code","code":{"text":[{"type":"text","text":{"content":"for {\n\tselect {\n\tcase <- done:\n\t\treturn\n\tdefault:\n\t}\n}","link":null},"annotations":{"bold":false,"italic":false,"strikethrough":false,"underline":false,"code":false,"color":"default"},"plain_text":"for {\n\tselect {\n\tcase <- done:\n\t\treturn\n\tdefault:\n\t}\n}","href":null}],"language":"go"}},{"object":"block","id":"457a2dec-92b2-4886-95cf-22e565d2dea3","created_time":"2021-12-02T13:43:00.000Z","last_edited_time":"2021-12-02T13:43:00.000Z","has_children":false,"archived":false,"type":"heading_2","heading_2":{"text":[{"type":"text","text":{"content":"ゴルーチンリークを避ける","link":null},"annotations":{"bold":false,"italic":false,"strikethrough":false,"underline":false,"code":false,"color":"default"},"plain_text":"ゴルーチンリークを避ける","href":null}]}},{"object":"block","id":"9ccf7b3e-ab7a-4483-8383-0d60c5946e49","created_time":"2021-12-02T13:43:00.000Z","last_edited_time":"2021-12-02T13:43:00.000Z","has_children":false,"archived":false,"type":"paragraph","paragraph":{"text":[{"type":"text","text":{"content":"ゴルーチンが終了する場合\n・ゴルーチンが処理を完了する場合\n・回復できないエラーにより処理を続けられない場合\n・停止するように命令された場合","link":null},"annotations":{"bold":false,"italic":false,"strikethrough":false,"underline":false,"code":false,"color":"default"},"plain_text":"ゴルーチンが終了する場合\n・ゴルーチンが処理を完了する場合\n・回復できないエラーにより処理を続けられない場合\n・停止するように命令された場合","href":null}]}},{"object":"block","id":"b63b0ff0-3ada-45ce-a869-f2608b92e082","created_time":"2021-12-02T13:43:00.000Z","last_edited_time":"2021-12-02T13:43:00.000Z","has_children":false,"archived":false,"type":"paragraph","paragraph":{"text":[{"type":"text","text":{"content":"ゴルーチンの親子間で親から子にキャンセルのシグナルを送れるようにする","link":null},"annotations":{"bold":false,"italic":false,"strikethrough":false,"underline":false,"code":false,"color":"default"},"plain_text":"ゴルーチンの親子間で親から子にキャンセルのシグナルを送れるようにする","href":null}]}},{"object":"block","id":"70f4c67d-d659-47d6-ae26-c4de9c017848","created_time":"2021-12-02T13:43:00.000Z","last_edited_time":"2021-12-02T13:43:00.000Z","has_children":false,"archived":false,"type":"code","code":{"text":[{"type":"text","text":{"content":"doWork := func(\n\tdone <- chan interface{},\n\tstrings <- chan string,\n) <- chan interface {} {\n\tterminated := make(chan interface{})\n\tgo func() {\n\t\tdefer fmt.Println(\"doWork exited.\")\n\t\tdefer close(terminated)\n\t\tfor {\n\t\t\tselect {\n\t\t\tcase s := strings:\n\t\t\t\tfmt.Printlne(s)\n\t\t\tcase <- done:\n\t\t\t\treturn\n\t\t\t}\n\t\t}\n\t}()\n\treturn terminated\n}\n\ndone := make(chan interface{})\nterminated := doWork(done, nil)\n\ngo func() {\n\ttime.Sleep(1 * time.Second)\n\tfmt.Println(\"Canceling doWork goroutine...\")\n\tclose(done)\n}()\n\n<-terminated\nfmt.Println(\"Done.\")","link":null},"annotations":{"bold":false,"italic":false,"strikethrough":false,"underline":false,"code":false,"color":"default"},"plain_text":"doWork := func(\n\tdone <- chan interface{},\n\tstrings <- chan string,\n) <- chan interface {} {\n\tterminated := make(chan interface{})\n\tgo func() {\n\t\tdefer fmt.Println(\"doWork exited.\")\n\t\tdefer close(terminated)\n\t\tfor {\n\t\t\tselect {\n\t\t\tcase s := strings:\n\t\t\t\tfmt.Printlne(s)\n\t\t\tcase <- done:\n\t\t\t\treturn\n\t\t\t}\n\t\t}\n\t}()\n\treturn terminated\n}\n\ndone := make(chan interface{})\nterminated := doWork(done, nil)\n\ngo func() {\n\ttime.Sleep(1 * time.Second)\n\tfmt.Println(\"Canceling doWork goroutine...\")\n\tclose(done)\n}()\n\n<-terminated\nfmt.Println(\"Done.\")","href":null}],"language":"go"}},{"object":"block","id":"096c2207-2c8b-4b35-9034-64d018685d70","created_time":"2021-12-02T13:43:00.000Z","last_edited_time":"2021-12-02T13:43:00.000Z","has_children":false,"archived":false,"type":"code","code":{"text":[{"type":"text","text":{"content":"newRandStream := func(done <- chan interface{}) <- chan int {\n\trandStream := make(chan int)\n\tgo func() {\n\t\tdefer fmt.Println(\"newRandStream closure exited.\")\n\t\tdefer close(randStream)\n\t\tfor {\n\t\t\tselect {\n\t\t\tcase randStream <- rand.Int():\n\t\t\tcase <- done:\n\t\t\t\treturn\n\t\t\t}\n\t\t}\n\t}()\n\treturn randStream\n}\n\ndone := make(chan interface{})\nrandStream := newRandStream(done)\nfmt.Println(\"3 random ints:\")\nfor i := 1; i <= 3; i++ {\n\tfmt.Printf(\"%d: %d\\n\", i, <- randStream)\n}\nclose(done)","link":null},"annotations":{"bold":false,"italic":false,"strikethrough":false,"underline":false,"code":false,"color":"default"},"plain_text":"newRandStream := func(done <- chan interface{}) <- chan int {\n\trandStream := make(chan int)\n\tgo func() {\n\t\tdefer fmt.Println(\"newRandStream closure exited.\")\n\t\tdefer close(randStream)\n\t\tfor {\n\t\t\tselect {\n\t\t\tcase randStream <- rand.Int():\n\t\t\tcase <- done:\n\t\t\t\treturn\n\t\t\t}\n\t\t}\n\t}()\n\treturn randStream\n}\n\ndone := make(chan interface{})\nrandStream := newRandStream(done)\nfmt.Println(\"3 random ints:\")\nfor i := 1; i <= 3; i++ {\n\tfmt.Printf(\"%d: %d\\n\", i, <- randStream)\n}\nclose(done)","href":null}],"language":"go"}},{"object":"block","id":"e0dde0c0-e796-4b3f-8fda-8041e4e225e2","created_time":"2021-12-02T13:43:00.000Z","last_edited_time":"2021-12-02T13:43:00.000Z","has_children":false,"archived":false,"type":"heading_2","heading_2":{"text":[{"type":"text","text":{"content":"orチャネル","link":null},"annotations":{"bold":false,"italic":false,"strikethrough":false,"underline":false,"code":false,"color":"default"},"plain_text":"orチャネル","href":null}]}},{"object":"block","id":"e8f2f0df-6cda-4790-8bd2-19c79a29fde5","created_time":"2021-12-02T13:43:00.000Z","last_edited_time":"2021-12-02T13:43:00.000Z","has_children":false,"archived":false,"type":"code","code":{"text":[{"type":"text","text":{"content":"var or func(channels ...<-chan interface{}) <-chan interface{}\nor = func(channels ...<-chan interface{}) <-chan interface{} {\n\tswitch len(channels) {\n\tcase 0:\n\t\treturn nil\n\tcase 1:\n\t\treturn channels[0]\n\t}\n\n\torDone := make(chan interface{})\n\tgo func() {\n\t\tdefer close(orDone)\n\t\tswitch len(channels) {\n\t\tcase 2:\n\t\t\tselect {\n\t\t\tcase <-channels[0]:\n\t\t\tcase <-channels[1]:\n\t\t\t}\n\t\tdefault:\n\t\t\tselect {\n\t\t\tcase <-channels[0]:\n\t\t\tcase <-channels[1]:\n\t\t\tcase <-channels[2]:\n\t\t\tcase <-or(append(channels[3:], orDone)...):\n\t\t\t}\n\t\t}\n\t}()\n\treturn orDone\n}\n\nsig := func(after time.Duration) <-chan interface{} {\n\tc := make(chan interface{})\n\tgo func() {\n\t\tdefer close(c)\n\t\ttime.Sleep(after)\n\t}()\n\treturn c\n}\n\nstart := time.Now()\n<-or(\n\tsig(2*time.Hour),\n\tsig(5*time.Minute),\n\tsig(1*time.Second),\n\tsig(1*time.Hour),\n\tsig(1*time.Minute),\n)\nfmt.Printf(\"done after %v\", time.Since(start))","link":null},"annotations":{"bold":false,"italic":false,"strikethrough":false,"underline":false,"code":false,"color":"default"},"plain_text":"var or func(channels ...<-chan interface{}) <-chan interface{}\nor = func(channels ...<-chan interface{}) <-chan interface{} {\n\tswitch len(channels) {\n\tcase 0:\n\t\treturn nil\n\tcase 1:\n\t\treturn channels[0]\n\t}\n\n\torDone := make(chan interface{})\n\tgo func() {\n\t\tdefer close(orDone)\n\t\tswitch len(channels) {\n\t\tcase 2:\n\t\t\tselect {\n\t\t\tcase <-channels[0]:\n\t\t\tcase <-channels[1]:\n\t\t\t}\n\t\tdefault:\n\t\t\tselect {\n\t\t\tcase <-channels[0]:\n\t\t\tcase <-channels[1]:\n\t\t\tcase <-channels[2]:\n\t\t\tcase <-or(append(channels[3:], orDone)...):\n\t\t\t}\n\t\t}\n\t}()\n\treturn orDone\n}\n\nsig := func(after time.Duration) <-chan interface{} {\n\tc := make(chan interface{})\n\tgo func() {\n\t\tdefer close(c)\n\t\ttime.Sleep(after)\n\t}()\n\treturn c\n}\n\nstart := time.Now()\n<-or(\n\tsig(2*time.Hour),\n\tsig(5*time.Minute),\n\tsig(1*time.Second),\n\tsig(1*time.Hour),\n\tsig(1*time.Minute),\n)\nfmt.Printf(\"done after %v\", time.Since(start))","href":null}],"language":"go"}},{"object":"block","id":"cdb65396-74c1-42c5-bb19-62defc273c13","created_time":"2021-12-02T13:43:00.000Z","last_edited_time":"2021-12-02T13:43:00.000Z","has_children":false,"archived":false,"type":"heading_2","heading_2":{"text":[{"type":"text","text":{"content":"エラーハンドリング","link":null},"annotations":{"bold":false,"italic":false,"strikethrough":false,"underline":false,"code":false,"color":"default"},"plain_text":"エラーハンドリング","href":null}]}},{"object":"block","id":"07cbd279-c685-406f-b03e-baba7906b691","created_time":"2021-12-02T13:43:00.000Z","last_edited_time":"2021-12-02T13:43:00.000Z","has_children":false,"archived":false,"type":"paragraph","paragraph":{"text":[{"type":"text","text":{"content":"https://www.ymotongpoo.com/works/goblog-ja/post/erros-are-values/","link":null},"annotations":{"bold":false,"italic":false,"strikethrough":false,"underline":false,"code":false,"color":"default"},"plain_text":"https://www.ymotongpoo.com/works/goblog-ja/post/erros-are-values/","href":null}]}},{"object":"block","id":"44e5ecb7-51fb-48cb-8a2e-ef5216c98e54","created_time":"2021-12-02T13:43:00.000Z","last_edited_time":"2021-12-02T13:43:00.000Z","has_children":false,"archived":false,"type":"paragraph","paragraph":{"text":[{"type":"text","text":{"content":"誰がそのエラーを処理する責任を持つべきか","link":null},"annotations":{"bold":false,"italic":false,"strikethrough":false,"underline":false,"code":false,"color":"default"},"plain_text":"誰がそのエラーを処理する責任を持つべきか","href":null}]}},{"object":"block","id":"3976c637-704d-4e22-8168-7001dd4b74ea","created_time":"2021-12-02T13:43:00.000Z","last_edited_time":"2021-12-02T13:43:00.000Z","has_children":false,"archived":false,"type":"paragraph","paragraph":{"text":[{"type":"text","text":{"content":"並行プロセスはエラーを、プログラムの状態を完全に把握していて何をすべきかをより多くの情報に基づいて決定的できる別の箇所へと送るべき","link":null},"annotations":{"bold":false,"italic":false,"strikethrough":false,"underline":false,"code":false,"color":"default"},"plain_text":"並行プロセスはエラーを、プログラムの状態を完全に把握していて何をすべきかをより多くの情報に基づいて決定的できる別の箇所へと送るべき","href":null}]}},{"object":"block","id":"c647b96c-3b1f-4c2a-9430-f5576a2d7001","created_time":"2021-12-02T13:43:00.000Z","last_edited_time":"2021-12-02T13:43:00.000Z","has_children":false,"archived":false,"type":"code","code":{"text":[{"type":"text","text":{"content":"type Result struct {\n\tError error\n\tResponse *http.Response\n}\n\ncheckStatus := func(done <-chan interface{}, urls ...string) <-chan Result {\n\tresults := make(chan Result)\n\tgo func() {\n\t\tdefer close(results)\n\n\t\tfor _, url := range urls {\n\t\t\tvar result Result\n\t\t\tresp, err := http.Get(url)\n\t\t\tresult = Result{Error: err, Response: resp}\n\t\t\tselect {\n\t\t\tcase <-done:\n\t\t\t\treturn\n\t\t\tcase results <-result:\n\t\t\t}\n\t\t}\n\t}()\n\treturn results\n}\n\ndone := make(chan interface{})\ndefer close(done)\n\nurls := []string{\"https://www.google.com\", \"https://badhost\"}\nfor result := range checkStatus(done, urls...) {\n\tif result.Error != nil {\n\t\tfmt.Printf(\"error: %v\", result.Error)\n\t\tcontinue\n\t}\n\tfmt.Printf(\"Response: %v\\n\", result.Response.Status)\n}","link":null},"annotations":{"bold":false,"italic":false,"strikethrough":false,"underline":false,"code":false,"color":"default"},"plain_text":"type Result struct {\n\tError error\n\tResponse *http.Response\n}\n\ncheckStatus := func(done <-chan interface{}, urls ...string) <-chan Result {\n\tresults := make(chan Result)\n\tgo func() {\n\t\tdefer close(results)\n\n\t\tfor _, url := range urls {\n\t\t\tvar result Result\n\t\t\tresp, err := http.Get(url)\n\t\t\tresult = Result{Error: err, Response: resp}\n\t\t\tselect {\n\t\t\tcase <-done:\n\t\t\t\treturn\n\t\t\tcase results <-result:\n\t\t\t}\n\t\t}\n\t}()\n\treturn results\n}\n\ndone := make(chan interface{})\ndefer close(done)\n\nurls := []string{\"https://www.google.com\", \"https://badhost\"}\nfor result := range checkStatus(done, urls...) {\n\tif result.Error != nil {\n\t\tfmt.Printf(\"error: %v\", result.Error)\n\t\tcontinue\n\t}\n\tfmt.Printf(\"Response: %v\\n\", result.Response.Status)\n}","href":null}],"language":"go"}},{"object":"block","id":"b55e97cc-7e77-4150-9883-bd39a82d5730","created_time":"2021-12-02T13:43:00.000Z","last_edited_time":"2021-12-02T13:43:00.000Z","has_children":false,"archived":false,"type":"heading_2","heading_2":{"text":[{"type":"text","text":{"content":"パイプライン","link":null},"annotations":{"bold":false,"italic":false,"strikethrough":false,"underline":false,"code":false,"color":"default"},"plain_text":"パイプライン","href":null}]}},{"object":"block","id":"4417bc26-6e4e-4eba-87c9-52607171e0e5","created_time":"2021-12-02T13:43:00.000Z","last_edited_time":"2021-12-02T13:43:00.000Z","has_children":false,"archived":false,"type":"paragraph","paragraph":{"text":[{"type":"text","text":{"content":"データを受け取って、何らかの処理を行なって、どこかに渡すという一連の作業","link":null},"annotations":{"bold":false,"italic":false,"strikethrough":false,"underline":false,"code":false,"color":"default"},"plain_text":"データを受け取って、何らかの処理を行なって、どこかに渡すという一連の作業","href":null}]}},{"object":"block","id":"ebf8e392-fdd3-49ed-ab40-94b340953285","created_time":"2021-12-02T13:43:00.000Z","last_edited_time":"2021-12-02T13:43:00.000Z","has_children":false,"archived":false,"type":"paragraph","paragraph":{"text":[{"type":"text","text":{"content":"ステージの性質\n・受け取るものと返すものが同じ型\n・弾き回せるように具体化されている","link":null},"annotations":{"bold":false,"italic":false,"strikethrough":false,"underline":false,"code":false,"color":"default"},"plain_text":"ステージの性質\n・受け取るものと返すものが同じ型\n・弾き回せるように具体化されている","href":null}]}},{"object":"block","id":"019ccd12-142b-416f-b218-9735157fe6fd","created_time":"2021-12-02T13:43:00.000Z","last_edited_time":"2021-12-02T13:43:00.000Z","has_children":false,"archived":false,"type":"paragraph","paragraph":{"text":[{"type":"text","text":{"content":"バッチ処理とストリーム処理","link":null},"annotations":{"bold":false,"italic":false,"strikethrough":false,"underline":false,"code":false,"color":"default"},"plain_text":"バッチ処理とストリーム処理","href":null}]}},{"object":"block","id":"7fe052fe-5979-4a15-a43e-1073b1e4dee4","created_time":"2021-12-02T13:43:00.000Z","last_edited_time":"2021-12-02T13:43:00.000Z","has_children":false,"archived":false,"type":"heading_3","heading_3":{"text":[{"type":"text","text":{"content":"パイプライン構築のためのベストプラクティス","link":null},"annotations":{"bold":false,"italic":false,"strikethrough":false,"underline":false,"code":false,"color":"default"},"plain_text":"パイプライン構築のためのベストプラクティス","href":null}]}},{"object":"block","id":"753ffe6f-ec9a-4f63-80d4-aab14113519a","created_time":"2021-12-02T13:43:00.000Z","last_edited_time":"2021-12-02T13:43:00.000Z","has_children":false,"archived":false,"type":"code","code":{"text":[{"type":"text","text":{"content":"geenrator := func(done <-chan interface{}, integers ...int) <-chan int {\n\tintStream := make(chan int, len(integers))\n\tgo func() {\n\t\tdefer close(intStream)\n\t\tfor _, i := range integers {\n\t\t\tselect {\n\t\t\tcase <-done:\n\t\t\t\treturn\n\t\t\tcase intStream <- i:\n\t\t\t}\n\t\t}\n\t}()\n\treturn intStream\n}\n\nmultiply := func(\n\tdone <-chan interface{},\n\tintStream <-chan int,\n\tmultipier int,\n) <-chan int {\n\tmultipliedStream := make(chan int)\n\tgo func() {\n\t\tdefer close(multipliedStream)\n\t\tfor i := range intStream {\n\t\t\tselect {\n\t\t\tcase <-done:\n\t\t\t\treturn\n\t\t\tcase multipliedStream <- i*multiplier:\n\t\t\t}\n\t\t}\n\t}()\nreturn multipliedStream\n}\n\nadd := func(\n\tdone <-chan interface{},\n\tintStream <-chan int,\n\tadditive int,\n) <-chan int {\n\taddedStream := make(chan int)\n\tgo func() {\n\t\tdefer close(addedStream)\n\t\tfor i := range(intStream) {\n\t\t\tselect {\n\t\t\tcase <-done:\n\t\t\t\treturn\n\t\t\tcase addedStream <- i+additive:\n\t\t\t}\n\t\t}\n\t}()\n\treturn addedStream\n}\n\ndone := make(chan interface{})\ndefer close(done)\n\nintStream := generator(done, 1, 2, 3, 4)\npipeline := multiply(done, add(done, multiply(done, intStream, 2), 1), 2)\n\nfor v := range pipeline {\n\tfmt.Printlne(v)\n}","link":null},"annotations":{"bold":false,"italic":false,"strikethrough":false,"underline":false,"code":false,"color":"default"},"plain_text":"geenrator := func(done <-chan interface{}, integers ...int) <-chan int {\n\tintStream := make(chan int, len(integers))\n\tgo func() {\n\t\tdefer close(intStream)\n\t\tfor _, i := range integers {\n\t\t\tselect {\n\t\t\tcase <-done:\n\t\t\t\treturn\n\t\t\tcase intStream <- i:\n\t\t\t}\n\t\t}\n\t}()\n\treturn intStream\n}\n\nmultiply := func(\n\tdone <-chan interface{},\n\tintStream <-chan int,\n\tmultipier int,\n) <-chan int {\n\tmultipliedStream := make(chan int)\n\tgo func() {\n\t\tdefer close(multipliedStream)\n\t\tfor i := range intStream {\n\t\t\tselect {\n\t\t\tcase <-done:\n\t\t\t\treturn\n\t\t\tcase multipliedStream <- i*multiplier:\n\t\t\t}\n\t\t}\n\t}()\nreturn multipliedStream\n}\n\nadd := func(\n\tdone <-chan interface{},\n\tintStream <-chan int,\n\tadditive int,\n) <-chan int {\n\taddedStream := make(chan int)\n\tgo func() {\n\t\tdefer close(addedStream)\n\t\tfor i := range(intStream) {\n\t\t\tselect {\n\t\t\tcase <-done:\n\t\t\t\treturn\n\t\t\tcase addedStream <- i+additive:\n\t\t\t}\n\t\t}\n\t}()\n\treturn addedStream\n}\n\ndone := make(chan interface{})\ndefer close(done)\n\nintStream := generator(done, 1, 2, 3, 4)\npipeline := multiply(done, add(done, multiply(done, intStream, 2), 1), 2)\n\nfor v := range pipeline {\n\tfmt.Printlne(v)\n}","href":null}],"language":"go"}},{"object":"block","id":"6277a218-c58a-4eeb-9c4b-bc148eafc844","created_time":"2021-12-02T13:43:00.000Z","last_edited_time":"2021-12-02T13:43:00.000Z","has_children":false,"archived":false,"type":"code","code":{"text":[{"type":"text","text":{"content":"repeat := func(\n\tdone <-chan interface{},\n\tvalues ...interface{},\n) <-chan interface{} {\n\tvalueStream := make(chan interface{})\n\tgo func() {\n\t\tdefer close(valueStream)\n\t\tfor {\n\t\t\tfor _, v := range values {\n\t\t\t\tselect {\n\t\t\t\tcase <- done:\n\t\t\t\t\treturn\n\t\t\t\tcase valueStream <- v:\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}()\n\treturn valueStream\n}\n\ntake := func(\n\tdone <-chan interface{},\n\tvalueStream <-chan interface{},\n\tnum int,\n) <- chan interface{} {\n\ttakeStream := make(chan interface{})\n\tgo func() {\n\t\tdefer close(takeStream)\n\t\t\n\t\tfor i := 0; i < num; i++ {\n\t\t\tselect {\n\t\t\tcase <-done:\n\t\t\t\treturn\n\t\t\tcase takeStream <- <- valueStream:\n\t\t\t}\n\t\t}\n\t}()\n\treturn takeStream\n}\n\ndone := make(chan interface{})\ndefer close(done)\n\nfor num := range take(done, repeat(done, 1), 10) {\n\tfmt.Printf(\"%v \", num)\n}\n\nrepeatFn := func(\n\tdone <-chan interface{},\n\tfn func() interface{},\n) <-chan interface{} {\n\tvalueStream := make(chan interface{})\n\tgo func() {\n\t\tdefer close(valueStream)\n\t\tfor {\n\t\t\tselect {\n\t\t\tcase <-done:\n\t\t\t\treturn\n\t\t\tcase valueStream <- fn():\n\t\t\t}\n\t\t}\n\t}()\n\treturn valueStream\n}\n\ndone := make(chan interface{})\ndefer close(done)\n\nrand := func() interface{} { return rand.Int() }\n\nfor num := range take(done, repeatFn(done, rand), 10) {\n\tfmt.Println(num)\n}\n\ntoString := func(\n\tdone <-chan interfacce{},\n\tvalueStream <-chan interface{},\n) <-chan string {\n\tstringStream := make(chan string)\n\tgo func() {\n\t\tdefer close(stringStream)\n\t\tfor v := range valueStream {\n\t\t\tselect {\n\t\t\tcase <-done:\n\t\t\t\treturn\n\t\t\tcase stringStream <- v.(string):\n\t\t\t}\n\t\t}\n\t}()\n\treturn stringStream\n}\n\ndone := make(chan interface{})\ndefer close(done)\n\nvar message string\nfor token := range toString(done, take(done, repeat(done, \"I\", \"am.\"), 5)) {\n\tmessage += token\n}\n\nfmt.Printf(\"message: %s...\", message)","link":null},"annotations":{"bold":false,"italic":false,"strikethrough":false,"underline":false,"code":false,"color":"default"},"plain_text":"repeat := func(\n\tdone <-chan interface{},\n\tvalues ...interface{},\n) <-chan interface{} {\n\tvalueStream := make(chan interface{})\n\tgo func() {\n\t\tdefer close(valueStream)\n\t\tfor {\n\t\t\tfor _, v := range values {\n\t\t\t\tselect {\n\t\t\t\tcase <- done:\n\t\t\t\t\treturn\n\t\t\t\tcase valueStream <- v:\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}()\n\treturn valueStream\n}\n\ntake := func(\n\tdone <-chan interface{},\n\tvalueStream <-chan interface{},\n\tnum int,\n) <- chan interface{} {\n\ttakeStream := make(chan interface{})\n\tgo func() {\n\t\tdefer close(takeStream)\n\t\t\n\t\tfor i := 0; i < num; i++ {\n\t\t\tselect {\n\t\t\tcase <-done:\n\t\t\t\treturn\n\t\t\tcase takeStream <- <- valueStream:\n\t\t\t}\n\t\t}\n\t}()\n\treturn takeStream\n}\n\ndone := make(chan interface{})\ndefer close(done)\n\nfor num := range take(done, repeat(done, 1), 10) {\n\tfmt.Printf(\"%v \", num)\n}\n\nrepeatFn := func(\n\tdone <-chan interface{},\n\tfn func() interface{},\n) <-chan interface{} {\n\tvalueStream := make(chan interface{})\n\tgo func() {\n\t\tdefer close(valueStream)\n\t\tfor {\n\t\t\tselect {\n\t\t\tcase <-done:\n\t\t\t\treturn\n\t\t\tcase valueStream <- fn():\n\t\t\t}\n\t\t}\n\t}()\n\treturn valueStream\n}\n\ndone := make(chan interface{})\ndefer close(done)\n\nrand := func() interface{} { return rand.Int() }\n\nfor num := range take(done, repeatFn(done, rand), 10) {\n\tfmt.Println(num)\n}\n\ntoString := func(\n\tdone <-chan interfacce{},\n\tvalueStream <-chan interface{},\n) <-chan string {\n\tstringStream := make(chan string)\n\tgo func() {\n\t\tdefer close(stringStream)\n\t\tfor v := range valueStream {\n\t\t\tselect {\n\t\t\tcase <-done:\n\t\t\t\treturn\n\t\t\tcase stringStream <- v.(string):\n\t\t\t}\n\t\t}\n\t}()\n\treturn stringStream\n}\n\ndone := make(chan interface{})\ndefer close(done)\n\nvar message string\nfor token := range toString(done, take(done, repeat(done, \"I\", \"am.\"), 5)) {\n\tmessage += token\n}\n\nfmt.Printf(\"message: %s...\", message)","href":null}],"language":"go"}},{"object":"block","id":"dfcae5fe-a59d-4fc7-bbae-481e569b8172","created_time":"2021-12-02T13:43:00.000Z","last_edited_time":"2021-12-02T13:43:00.000Z","has_children":false,"archived":false,"type":"heading_2","heading_2":{"text":[{"type":"text","text":{"content":"ファンアウト、ファンイン","link":null},"annotations":{"bold":false,"italic":false,"strikethrough":false,"underline":false,"code":false,"color":"default"},"plain_text":"ファンアウト、ファンイン","href":null}]}},{"object":"block","id":"0936fc5f-b87a-48b8-81e2-e827f8e88b12","created_time":"2021-12-02T13:43:00.000Z","last_edited_time":"2021-12-02T13:43:00.000Z","has_children":false,"archived":false,"type":"paragraph","paragraph":{"text":[{"type":"text","text":{"content":"ファンアウト：パイプラインからの入力を扱うために複数のゴルーチンを起動するプロセス\n利用すべき条件\n・そのステージがより前の計算結果に依存していない\n・実行が長時間に及ぶ","link":null},"annotations":{"bold":false,"italic":false,"strikethrough":false,"underline":false,"code":false,"color":"default"},"plain_text":"ファンアウト：パイプラインからの入力を扱うために複数のゴルーチンを起動するプロセス\n利用すべき条件\n・そのステージがより前の計算結果に依存していない\n・実行が長時間に及ぶ","href":null}]}},{"object":"block","id":"5bdb2b90-3b48-4578-8703-29d4c05caede","created_time":"2021-12-02T13:43:00.000Z","last_edited_time":"2021-12-02T13:43:00.000Z","has_children":false,"archived":false,"type":"paragraph","paragraph":{"text":[{"type":"text","text":{"content":"ファンイン：複数の結果を一つのチャネルに結合するプロセス","link":null},"annotations":{"bold":false,"italic":false,"strikethrough":false,"underline":false,"code":false,"color":"default"},"plain_text":"ファンイン：複数の結果を一つのチャネルに結合するプロセス","href":null}]}},{"object":"block","id":"3eefbb33-381d-4a8c-9a80-132cdf401393","created_time":"2021-12-02T13:43:00.000Z","last_edited_time":"2021-12-02T13:43:00.000Z","has_children":false,"archived":false,"type":"heading_2","heading_2":{"text":[{"type":"text","text":{"content":"or-doneチャネル","link":null},"annotations":{"bold":false,"italic":false,"strikethrough":false,"underline":false,"code":false,"color":"default"},"plain_text":"or-doneチャネル","href":null}]}},{"object":"block","id":"8d0d2ce4-5b4d-41f7-973a-8f452ed18c34","created_time":"2021-12-02T13:43:00.000Z","last_edited_time":"2021-12-02T13:43:00.000Z","has_children":false,"archived":false,"type":"code","code":{"text":[{"type":"text","text":{"content":"orDone := func(done, c <-chan interface{}) <-chan interface{} {\n\tvalStream := make(chan interface{})\n\tgo func() {\n\t\tdefer close(valStream)\n\t\tfor {\n\t\t\tselect {\n\t\t\tcase <-done:\n\t\t\t\treturn\n\t\t\tcase v, ok := <-c:\n\t\t\t\tif ok == false {\n\t\t\t\t\treturn\n\t\t\t\t}\n\t\t\t\tselect {\n\t\t\t\tcase valStream <- v:\n\t\t\t\tcase <-done:\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}()\n\treturn valStream\n}\n\nfor val := range orDone(done, myChan) {\n}","link":null},"annotations":{"bold":false,"italic":false,"strikethrough":false,"underline":false,"code":false,"color":"default"},"plain_text":"orDone := func(done, c <-chan interface{}) <-chan interface{} {\n\tvalStream := make(chan interface{})\n\tgo func() {\n\t\tdefer close(valStream)\n\t\tfor {\n\t\t\tselect {\n\t\t\tcase <-done:\n\t\t\t\treturn\n\t\t\tcase v, ok := <-c:\n\t\t\t\tif ok == false {\n\t\t\t\t\treturn\n\t\t\t\t}\n\t\t\t\tselect {\n\t\t\t\tcase valStream <- v:\n\t\t\t\tcase <-done:\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}()\n\treturn valStream\n}\n\nfor val := range orDone(done, myChan) {\n}","href":null}],"language":"go"}},{"object":"block","id":"49c4479c-d65d-4fe0-b07e-e34ed11a5bf5","created_time":"2021-12-02T13:43:00.000Z","last_edited_time":"2021-12-02T13:43:00.000Z","has_children":false,"archived":false,"type":"heading_2","heading_2":{"text":[{"type":"text","text":{"content":"teeチャネル","link":null},"annotations":{"bold":false,"italic":false,"strikethrough":false,"underline":false,"code":false,"color":"default"},"plain_text":"teeチャネル","href":null}]}},{"object":"block","id":"d5f4acf7-2c2f-4764-9fe3-6650de7aa492","created_time":"2021-12-02T13:43:00.000Z","last_edited_time":"2021-12-02T13:43:00.000Z","has_children":false,"archived":false,"type":"paragraph","paragraph":{"text":[{"type":"text","text":{"content":"チャネルからのストリームを2つに分け、同じ値を2つの異なる場所で使う場合","link":null},"annotations":{"bold":false,"italic":false,"strikethrough":false,"underline":false,"code":false,"color":"default"},"plain_text":"チャネルからのストリームを2つに分け、同じ値を2つの異なる場所で使う場合","href":null}]}},{"object":"block","id":"f6dc0c24-6ba1-48ec-a721-826d2ff2b2b0","created_time":"2021-12-02T13:43:00.000Z","last_edited_time":"2021-12-02T13:43:00.000Z","has_children":false,"archived":false,"type":"code","code":{"text":[{"type":"text","text":{"content":"tee := func(\n\tdone <-chan interface{},\n\tin <-chan interface{},\n) (_, _ <-chan interface{}) {\n\tout1 := make(chan interface{})\n\tout2 := make(chan interface{})\n\tgo func() {\n\t\tdefer close(out1)\n\t\tdefer close(out2)\n\t\tfor val := range orDone(done, in) {\n\t\t\tvar out1, out2 = out1, out2\n\t\t\tfor i := 0; i < 2; i++ {\n\t\t\t\tselect {\n\t\t\t\tcase out1<-val:\n\t\t\t\t\tout1 = nil\n\t\t\t\tcase out2<-val:\n\t\t\t\t\tout2 = nil\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}()\n\treturn out1, out2\n}\n\ndone := make(chan interface{})\ndefer close(done)\n\nout1, out2 := tee(done, take(done, repeat(done, 1, 2), 4))\n\nfor val1 := range out1 {\n\tfmt.Printf(\"out1: %v, out2: %v\\n\", val1, <-out2)\n}","link":null},"annotations":{"bold":false,"italic":false,"strikethrough":false,"underline":false,"code":false,"color":"default"},"plain_text":"tee := func(\n\tdone <-chan interface{},\n\tin <-chan interface{},\n) (_, _ <-chan interface{}) {\n\tout1 := make(chan interface{})\n\tout2 := make(chan interface{})\n\tgo func() {\n\t\tdefer close(out1)\n\t\tdefer close(out2)\n\t\tfor val := range orDone(done, in) {\n\t\t\tvar out1, out2 = out1, out2\n\t\t\tfor i := 0; i < 2; i++ {\n\t\t\t\tselect {\n\t\t\t\tcase out1<-val:\n\t\t\t\t\tout1 = nil\n\t\t\t\tcase out2<-val:\n\t\t\t\t\tout2 = nil\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}()\n\treturn out1, out2\n}\n\ndone := make(chan interface{})\ndefer close(done)\n\nout1, out2 := tee(done, take(done, repeat(done, 1, 2), 4))\n\nfor val1 := range out1 {\n\tfmt.Printf(\"out1: %v, out2: %v\\n\", val1, <-out2)\n}","href":null}],"language":"go"}}]}},"__N_SSG":true}